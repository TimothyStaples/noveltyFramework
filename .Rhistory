proj4string(site.coords.raw) <- proj4string(world)
site.df.save <- site.df
site.df <- cbind(site.df, site.coords.raw %over% world)
nthAmSite <- site.df[site.df$REGION == "North America",]
neo <- droplevels(neo[neo$siteid %in% nthAmSite$siteid,])
neo <- neo[neo$age <= 5000 & neo$age > -50 & !is.na(neo$age),]
#               Identify high density sample region ####
# North american plot
plot(nthAmSite$lat ~ nthAmSite$long)
# target region
rect(xleft=-97.5, xright=-90, ybottom=41, ytop=49, border="red")
# subset site data to target region
subSite <- droplevels(nthAmSite[nthAmSite$long <= -90 & nthAmSite$long >= -97.5 &
nthAmSite$lat <= 49 & nthAmSite$lat >= 41,])
plot(subSite$lat ~ subSite$long)
# subset sample data to just sites in target region
neoSub <- droplevels(neo[neo$siteid %in% subSite$siteid,])
# add in geographical metadata to sample dataframe
neoSub <- merge(neoSub, subSite[,-c(1,3:6)],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# cut pollen ages into 500 year bins (beginning at -50 ybp which = 2000 AD)
neoSub$timeBin <- cutCenter(neoSub$age,
breaks=seq(-50,5500,500),
include.lowest = TRUE)
cutCenter <- function(x, ...){
rowMeans(cbind(as.numeric( sub("\\((.+),.*", "\\1", x)),
as.numeric( sub("[^,]*,([^]]*)\\]", "\\1", x) )))
}
# cut pollen ages into 500 year bins (beginning at -50 ybp which = 2000 AD)
neoSub$timeBin <- cutCenter(neoSub$age,
breaks=seq(-50,5500,500),
include.lowest = TRUE)
# create site x taxa x timebin array (3D array)
neoArr <- tapply(neoSub$value,
list(neoSub$siteid, neoSub$family, neoSub$timeBin), sum, na.rm=TRUE)
neoArr[is.na(neoArr)] = 0
dim(neoArr) # dimensions are ordered as site, taxa, time
# calculate the number of samples within each bin
neoSampleSize = with(neoSub[!duplicated(neoSub[,c("siteid", "sampleid")]),],
table(siteid, timeBin))
# remove aquatic families
neoArr <- neoArr[,!dimnames(neoArr)[[2]] %in% c("Potamogetonaceae", "Nymphaeaceae",
"Typhaceae", "Cabombaceae",
"Alismataceae", "Haloragaceae"),]
# Use only the 20 most abundant families. First create an array where each
# site x time bin combination is relativized
neoArrProp = array(apply(neoArr, 3, function(x){prop.table(x, margin=1)}),
dim=dim(neoArr), dimnames=dimnames(neoArr))
#               Calculate novelty ####
# now we can make novelty assessments across modern vs pre-modern time slices
# subset array to time series with slices in the modern (-50-450 ybp) and pre-modern
# (450-950 ybp). Look for sites with data in both time bins
neoArrSub = neoArr[rowSums(neoArr[,,1] > 0) & rowSums(neoArr[,,2] >0),,1:2]
neoArrRoot = sqrt(neoArrSub)
novGrid <- data.frame(siteid = rownames(neoArrSub))
novGrid <- merge(novGrid, subSite[,c("siteid", "long", "lat")],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# now we can make novelty assessments across modern vs pre-modern time slices
# subset array to time series with slices in the modern (-50-450 ybp) and pre-modern
# (450-950 ybp). Look for sites with data in both time bins
neoArrSub = neoArr[rowSums(neoArr[,,1] > 0) & rowSums(neoArr[,,2] >0),,1:2]
neoArrRoot = sqrt(neoArrSub)
novGrid <- data.frame(siteid = rownames(neoArrSub))
head(novGrid)
neoArr
sum(neoArr)
dim(neoArr)
# subset sample data to just sites in target region
neoSub <- droplevels(neo[neo$siteid %in% subSite$siteid,])
# subset sample data to just sites in target region
neoSub <- droplevels(neo[neo$siteid %in% subSite$siteid,])
# add in geographical metadata to sample dataframe
neoSub <- merge(neoSub, subSite[,-c(1,3:6)],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
neoSub
neoSub$age
neoSub$timeBin <- cutCenter(neoSub$age,
breaks=seq(-50,5500,500),
include.lowest = TRUE)
# create site x taxa x timebin array (3D array)
neoArr <- tapply(neoSub$value,
list(neoSub$siteid, neoSub$family, neoSub$timeBin), sum, na.rm=TRUE)
neoArr[,"Pinaceae",]
neoArr[,"Pinaceae",1]
summary(is.na(neoArr))
dimnames(neoArr)
neoSub$timeBin
sapply(list.files("./functions", full.names = TRUE), source)
rm(list=ls())
setwd("/Users/uqtstapl/Library/CloudStorage/Dropbox/Tim/Post-doc/Research projects/PaleoNovelty/prodCode")
# READ IN SUPPLEMENTARY FUNCTIONS ####
sapply(list.files("./functions", full.names = TRUE), source)
# DEPENDENCIES ####
package.loader(c("rworldmap", "vegan", "sf", "shape", "lme4"))
# Dependencies:
# Title:        A conceptual framework for measuring ecological novelty     ####
# Description:  This script performs analyses for the quantitative case study
# Author:       Timothy Staples
# Date Created: 2022-01-01
# Last Modified: 2024-06-11
# Version:      1.0
# License:      MIT License
# ========================================================================= ####
# SET DIRECTORY ####
setwd("/Users/uqtstapl/Library/CloudStorage/Dropbox/Tim/Post-doc/Research projects/PaleoNovelty/prodCode")
# READ IN SUPPLEMENTARY FUNCTIONS ####
sapply(list.files("./functions", full.names = TRUE), source)
# DEPENDENCIES ####
package.loader(c("rworldmap", "vegan", "sf", "shape", "lme4"))
# Dependencies:
# - rworldmap: world map shape files
# - vegan: ecological analysis and dissimilarity indices
# - sf: spatial data capability
# - shape: supplementary plotting tools
# - lme4: mixed-effects modelling
# Notes:
# Neotoma download and taxonomic synonymization are conducted in a separate script
# (neotomaProcessing.R). The output of the processing script has been pre-loaded
# into the "rawdata" subfolder of this repository for ease of reproduction.
# ========================================================================= ####
# 1. NEOTOMA DATA IMPORT ####
rm(list=ls())
# read in processed Neotoma data
neo <- readRDS("./rawdata/processedRecords.rds")
# only pollen (exclude spores etc)
neo = neo[neo$elementtype == "pollen",]
# Collate coordinates and geographical data using world map and lat/long coords
# restrict data to Nth America and pollen samples within -50-5000 ybp
neo <- neo[complete.cases(neo[,c("long","lat")]),]
world <- getMap("high")
site.df <- neo[!duplicated(neo$siteid), c("age", "siteid", "sitename", "long", "lat", "elev")]
site.coords.raw <- site.df[,c("long", "lat")]
coordinates(site.coords.raw) <- c("long", "lat")
proj4string(site.coords.raw) <- proj4string(world)
site.df.save <- site.df
site.df <- cbind(site.df, site.coords.raw %over% world)
nthAmSite <- site.df[site.df$REGION == "North America",]
neo <- droplevels(neo[neo$siteid %in% nthAmSite$siteid,])
neo <- neo[neo$age <= 5000 & neo$age > -50 & !is.na(neo$age),]
#               Identify high density sample region ####
# North american plot
plot(nthAmSite$lat ~ nthAmSite$long)
# target region
rect(xleft=-97.5, xright=-90, ybottom=41, ytop=49, border="red")
# subset site data to target region
subSite <- droplevels(nthAmSite[nthAmSite$long <= -90 & nthAmSite$long >= -97.5 &
nthAmSite$lat <= 49 & nthAmSite$lat >= 41,])
plot(subSite$lat ~ subSite$long)
#               Sub-sample data ####
# subset sample data to just sites in target region
neoSub <- droplevels(neo[neo$siteid %in% subSite$siteid,])
# add in geographical metadata to sample dataframe
neoSub <- merge(neoSub, subSite[,-c(1,3:6)],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# cut pollen ages into 500 year bins (beginning at -50 ybp which = 2000 AD)
neoSub$timeBin <- cutCenter(neoSub$age,
breaks=seq(-50,5500,500),
include.lowest = TRUE)
setwd("/Users/uqtstapl/Library/CloudStorage/Dropbox/Tim/Post-doc/Research projects/PaleoNovelty/prodCode")
# READ IN SUPPLEMENTARY FUNCTIONS ####
sapply(list.files("./functions", full.names = TRUE), source)
# DEPENDENCIES ####
package.loader(c("rworldmap", "vegan", "sf", "shape", "lme4"))
# cut pollen ages into 500 year bins (beginning at -50 ybp which = 2000 AD)
neoSub$timeBin <- cutCenter(neoSub$age,
breaks=seq(-50,5500,500),
include.lowest = TRUE)
neoSub$timeBin
# create site x taxa x timebin array (3D array)
neoArr <- tapply(neoSub$value,
list(neoSub$siteid, neoSub$family, neoSub$timeBin), sum, na.rm=TRUE)
neoArr[is.na(neoArr)] = 0
dim(neoArr) # dimensions are ordered as site, taxa, time
# calculate the number of samples within each bin
neoSampleSize = with(neoSub[!duplicated(neoSub[,c("siteid", "sampleid")]),],
table(siteid, timeBin))
# remove aquatic families
neoArr <- neoArr[,!dimnames(neoArr)[[2]] %in% c("Potamogetonaceae", "Nymphaeaceae",
"Typhaceae", "Cabombaceae",
"Alismataceae", "Haloragaceae"),]
# Use only the 20 most abundant families. First create an array where each
# site x time bin combination is relativized
neoArrProp = array(apply(neoArr, 3, function(x){prop.table(x, margin=1)}),
dim=dim(neoArr), dimnames=dimnames(neoArr))
# remove taxa with abundance < the 20th highest mean
taxaMean = apply(neoArrProp[,,1:2], 2, mean, na.rm=TRUE)
neoArr = neoArr[,taxaMean >= sort(taxaMean, decreasing=TRUE)[20],]
# subset array to time series with slices in the modern (-50-450 ybp) and pre-modern
# (450-950 ybp). Look for sites with data in both time bins
neoArrSub = neoArr[rowSums(neoArr[,,1] > 0) & rowSums(neoArr[,,2] >0),,1:2]
neoArrRoot = sqrt(neoArrSub)
novGrid <- data.frame(siteid = rownames(neoArrSub))
novGrid <- merge(novGrid, subSite[,c("siteid", "long", "lat")],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# novelty calculated four ways:
# how the past differs from the present (no-analog)
novGrid = cbind(novGrid,
do.call('rbind', lapply(1:dim(neoArrRoot)[1], function(n){
x = novelty(neoArrRoot[n,,2] / sum(neoArrRoot[n,,2]),
prop.table(neoArrRoot[,,1], 1), method="bray")
return(data.frame(noAnalog = x,
noAnalogWhich = names(x)))
})))
# how the present differs from the past (time's arrow novelty)
novGrid = cbind(novGrid,
do.call("rbind", lapply(1:dim(neoArrRoot)[1], function(n){
x = novelty(neoArrRoot[n,,1] / sum(neoArrRoot[n,,1]),
prop.table(neoArrRoot[,,2], 1), method="bray")
return(data.frame(timeArrow = x,
timeArrowWhich = names(x)))
})))
# how the past differs from the past (past comparison)
novGrid = cbind(novGrid,
do.call("rbind", lapply(1:dim(neoArrRoot)[1], function(n){
x = novelty(neoArrRoot[n,,2] / sum(neoArrRoot[n,,2]), prop.table(neoArrRoot[,,2], 1), method="bray", nSize=2)[2]
return(data.frame(pastComp = x,
pastCompWhich = names(x)))
})))
# how the present differs from the present (present comparison)
novGrid = cbind(novGrid,
do.call("rbind", lapply(1:dim(neoArrRoot)[1], function(n){
x = novelty(neoArrRoot[n,,1] / sum(neoArrRoot[n,,1]), prop.table(neoArrRoot[,,1], 1), method="bray", nSize=2)[2]
return(data.frame(presentComp = x,
presentCompWhich = names(x)))
})))
# add in sampling size
novGrid$pastSamples = neoSampleSize[match(novGrid$siteid, rownames(neoSampleSize)), 2]
novGrid$presentSamples = neoSampleSize[match(novGrid$siteid, rownames(neoSampleSize)), 1]
# re-order columns so novelty columns are all together
novGrid = novGrid[,c("siteid", "long", "lat",
"noAnalog", "timeArrow", "pastComp", "presentComp",
"noAnalogWhich", "timeArrowWhich", "pastCompWhich", "presentCompWhich",
"pastSamples", "presentSamples")]
head(novGrid)
cor(cbind(sapply(novGrid[,4:7], logit),
sapply(novGrid[,12:13], log)),
use="complete.obs")
# run ordination on relativized counts
neoArrSubProp = array(apply(neoArrSub, 3, function(x){prop.table(x, margin=1)}),
dim=dim(neoArrSub), dimnames=dimnames(neoArrSub))
# collapse 3D array to site-taxa matrix
neoNMDSArr = rbind(neoArrSubProp[,,1], neoArrSubProp[,,2])
set.seed(001155)
neoOrd <- metaMDS(neoNMDSArr)
pdf("./plots/newOrd.pdf", height=8, width=8, useDingbats = FALSE)
par(mfrow=c(2,2), oma=c(3,3,0.5,0.5), mar=c(0,0,0,0), mgp=c(3,0.5,0), ps=10, tcl=-0.25, las=1)
sapply(1:4, function(n){
plot(neoOrd$points, type="n", asp=1, xlab="", ylab="", xaxt="n", yaxt="n")
if(n %in% c(3:4)){
axis(side=1, mgp=c(3,0.1,0)); mtext(side=1, line=1, text="nMDS1")
} else {axis(side=1, labels=NA)}
if(n %in% c(1,3)){
axis(side=2); mtext(side=2, line=2, las=0, text="nMDS2")
} else {axis(side=2, labels=NA)}
novCol = c("darkblue", "red", "darkgreen", "purple")[n]
novRamp = colorRampPalette(c("white", novCol))(5)
points(neoOrd$species, pch=16, lwd=2, col="grey")
text(neoOrd$species, labels=gsub("aceae|inosae|ositae", "", rownames(neoOrd$species)), pos=2, col="grey")
presentPoints = neoOrd$points[1:dim(neoArrSubProp)[1],]
pastPoints = neoOrd$points[(dim(neoArrSubProp)[1]+1):nrow(neoOrd$points),]
novGridOrder = novGrid[match(rownames(presentPoints), novGrid$siteid),]
novScaling = function(x){c(0.5,0.8,1,1.5)[cut(x, breaks=c(0,0.05,0.1,0.15,0.2,1))]}
# no-analog points
if(n==1){
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 1],
y1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 2])
points(presentPoints, pch=4, col="black", cex=0.5)
points(pastPoints,
pch=21, cex=novScaling(novGridOrder$noAnalog),
bg=novRamp[cut(novGridOrder$noAnalog, breaks=seq(0,0.25,0.05))])
}
# time's arrow points
if(n==2){
segments(x0= presentPoints[,1],
y0= presentPoints[,2],
x1 = pastPoints[match(novGridOrder$timeArrowWhich, rownames(pastPoints)), 1],
y1 = pastPoints[match(novGridOrder$timeArrowWhich, rownames(pastPoints)), 2],
lty="31")
points(pastPoints, pch=4, col="black", cex=0.5)
points(presentPoints,
pch=21, cex=novScaling(novGridOrder$timeArrow),
bg=novRamp[cut(novGridOrder$timeArrow, breaks=seq(0,0.25,0.05))])
}
# past comparison points
if(n==3){
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 1],
y1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 2],
lty="31")
points(pastPoints,
pch=21, cex=novScaling(novGridOrder$pastComp),
bg=novRamp[cut(novGridOrder$pastComp, breaks=seq(0,0.25,0.05))])
legend(x=relative.axis.point(0.02, "x"),
y=relative.axis.point(0.9, "y"),
pch=c(rep(21,4),4), pt.cex=novScaling(seq(0.025, 0.175, 0.05)),
pt.bg=c(colorRampPalette(c("white", "grey20"))(4), NA),
legend = c("< 0.05", "0.05 - 0.10","0.10 - 0.15","> 0.15", "Ref set"),
title = "Novelty")
}
if(n==4){
segments(x0 = presentPoints[,1],
y0 = presentPoints[,2],
x1 = presentPoints[match(novGridOrder$presentCompWhich, rownames(presentPoints)), 1],
y1 = presentPoints[match(novGridOrder$presentCompWhich, rownames(presentPoints)), 2],
lty="31")
points(presentPoints,
pch=21, cex=novScaling(novGridOrder$presentComp),
bg=novRamp[cut(novGridOrder$presentComp, breaks=seq(0,0.25,0.05))])
}
text(x=relative.axis.point(0.02, "x"), y=relative.axis.point(0.95, "y"),
labels=paste0("(",LETTERS[n],")"), font=2, adj=0)
text(x=relative.axis.point(0.07, "x"), y=relative.axis.point(0.95, "y"),
labels=c("No-analog", "Time's arrow", "Past comparison", "Present comparison")[n],
adj=0)
text(x=relative.axis.point(0.035, "x"), y=relative.axis.point(0.035, "y"),
labels=paste0("Stress = ", sprintf("%.3f", neoOrd$stress)), adj=0)
})
dev.off()
n<-1
plot(neoOrd$points, type="n", asp=1, xlab="", ylab="", xaxt="n", yaxt="n")
if(n %in% c(3:4)){
axis(side=1, mgp=c(3,0.1,0)); mtext(side=1, line=1, text="nMDS1")
} else {axis(side=1, labels=NA)}
if(n %in% c(1,3)){
axis(side=2); mtext(side=2, line=2, las=0, text="nMDS2")
} else {axis(side=2, labels=NA)}
novCol = c("darkblue", "red", "darkgreen", "purple")[n]
novRamp = colorRampPalette(c("white", novCol))(5)
points(neoOrd$species, pch=16, lwd=2, col="grey")
text(neoOrd$species, labels=gsub("aceae|inosae|ositae", "", rownames(neoOrd$species)), pos=2, col="grey")
presentPoints = neoOrd$points[1:dim(neoArrSubProp)[1],]
pastPoints = neoOrd$points[(dim(neoArrSubProp)[1]+1):nrow(neoOrd$points),]
novGridOrder = novGrid[match(rownames(presentPoints), novGrid$siteid),]
novScaling = function(x){c(0.5,0.8,1,1.5)[cut(x, breaks=c(0,0.05,0.1,0.15,0.2,1))]}
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 1],
y1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 2],
lty="31")
points(presentPoints, pch=4, col="black", cex=0.5)
points(pastPoints,
pch=21, cex=novScaling(novGridOrder$noAnalog),
bg=novRamp[cut(novGridOrder$noAnalog, breaks=seq(0,0.25,0.05))])
novScaling
novScaling(novGridOrder$noAnalog)
n<-3
plot(neoOrd$points, type="n", asp=1, xlab="", ylab="", xaxt="n", yaxt="n")
if(n %in% c(3:4)){
axis(side=1, mgp=c(3,0.1,0)); mtext(side=1, line=1, text="nMDS1")
} else {axis(side=1, labels=NA)}
if(n %in% c(1,3)){
axis(side=2); mtext(side=2, line=2, las=0, text="nMDS2")
} else {axis(side=2, labels=NA)}
novCol = c("darkblue", "red", "darkgreen", "purple")[n]
novRamp = colorRampPalette(c("white", novCol))(5)
points(neoOrd$species, pch=16, lwd=2, col="grey")
text(neoOrd$species, labels=gsub("aceae|inosae|ositae", "", rownames(neoOrd$species)), pos=2, col="grey")
presentPoints = neoOrd$points[1:dim(neoArrSubProp)[1],]
pastPoints = neoOrd$points[(dim(neoArrSubProp)[1]+1):nrow(neoOrd$points),]
novGridOrder = novGrid[match(rownames(presentPoints), novGrid$siteid),]
novScaling = function(x){c(0.5,0.8,1,1.5)[cut(x, breaks=c(0,0.05,0.1,0.15,0.2,1))]}
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 1],
y1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 2],
lty="31")
novScaling(novGridOrder$pastComp)
cbind(novGridOrder$pastComp, novScaling(novGridOrder$pastComp))
novScaling = function(x){c(0.5,0.8,1,1.5, 1.5)[cut(x, breaks=c(0,0.05,0.1,0.15,0.2,1))]}
pdf("./plots/newOrd.pdf", height=8, width=8, useDingbats = FALSE)
par(mfrow=c(2,2), oma=c(3,3,0.5,0.5), mar=c(0,0,0,0), mgp=c(3,0.5,0), ps=10, tcl=-0.25, las=1)
sapply(1:4, function(n){
plot(neoOrd$points, type="n", asp=1, xlab="", ylab="", xaxt="n", yaxt="n")
if(n %in% c(3:4)){
axis(side=1, mgp=c(3,0.1,0)); mtext(side=1, line=1, text="nMDS1")
} else {axis(side=1, labels=NA)}
if(n %in% c(1,3)){
axis(side=2); mtext(side=2, line=2, las=0, text="nMDS2")
} else {axis(side=2, labels=NA)}
novCol = c("darkblue", "red", "darkgreen", "purple")[n]
novRamp = colorRampPalette(c("white", novCol))(5)
points(neoOrd$species, pch=16, lwd=2, col="grey")
text(neoOrd$species, labels=gsub("aceae|inosae|ositae", "", rownames(neoOrd$species)), pos=2, col="grey")
presentPoints = neoOrd$points[1:dim(neoArrSubProp)[1],]
pastPoints = neoOrd$points[(dim(neoArrSubProp)[1]+1):nrow(neoOrd$points),]
novGridOrder = novGrid[match(rownames(presentPoints), novGrid$siteid),]
novScaling = function(x){c(0.5,0.8,1,1.5, 1.5)[cut(x, breaks=c(0,0.05,0.1,0.15,0.2,1))]}
# no-analog points
if(n==1){
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 1],
y1 = presentPoints[match(novGridOrder$noAnalogWhich, rownames(presentPoints)), 2],
lty="31")
points(presentPoints, pch=4, col="black", cex=0.5)
points(pastPoints,
pch=21, cex=novScaling(novGridOrder$noAnalog),
bg=novRamp[cut(novGridOrder$noAnalog, breaks=seq(0,0.25,0.05))])
}
# time's arrow points
if(n==2){
segments(x0= presentPoints[,1],
y0= presentPoints[,2],
x1 = pastPoints[match(novGridOrder$timeArrowWhich, rownames(pastPoints)), 1],
y1 = pastPoints[match(novGridOrder$timeArrowWhich, rownames(pastPoints)), 2],
lty="31")
points(pastPoints, pch=4, col="black", cex=0.5)
points(presentPoints,
pch=21, cex=novScaling(novGridOrder$timeArrow),
bg=novRamp[cut(novGridOrder$timeArrow, breaks=seq(0,0.25,0.05))])
}
# past comparison points
if(n==3){
segments(x0 = pastPoints[,1],
y0 = pastPoints[,2],
x1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 1],
y1 = pastPoints[match(novGridOrder$pastCompWhich, rownames(pastPoints)), 2],
lty="31")
points(pastPoints,
pch=21, cex=novScaling(novGridOrder$pastComp),
bg=novRamp[cut(novGridOrder$pastComp, breaks=seq(0,0.25,0.05))])
legend(x=relative.axis.point(0.02, "x"),
y=relative.axis.point(0.9, "y"),
pch=c(rep(21,4),4), pt.cex=novScaling(seq(0.025, 0.175, 0.05)),
pt.bg=c(colorRampPalette(c("white", "grey20"))(4), NA),
legend = c("< 0.05", "0.05 - 0.10","0.10 - 0.15","> 0.15", "Ref set"),
title = "Novelty")
}
if(n==4){
segments(x0 = presentPoints[,1],
y0 = presentPoints[,2],
x1 = presentPoints[match(novGridOrder$presentCompWhich, rownames(presentPoints)), 1],
y1 = presentPoints[match(novGridOrder$presentCompWhich, rownames(presentPoints)), 2],
lty="31")
points(presentPoints,
pch=21, cex=novScaling(novGridOrder$presentComp),
bg=novRamp[cut(novGridOrder$presentComp, breaks=seq(0,0.25,0.05))])
}
text(x=relative.axis.point(0.02, "x"), y=relative.axis.point(0.95, "y"),
labels=paste0("(",LETTERS[n],")"), font=2, adj=0)
text(x=relative.axis.point(0.07, "x"), y=relative.axis.point(0.95, "y"),
labels=c("No-analog", "Time's arrow", "Past comparison", "Present comparison")[n],
adj=0)
text(x=relative.axis.point(0.035, "x"), y=relative.axis.point(0.035, "y"),
labels=paste0("Stress = ", sprintf("%.3f", neoOrd$stress)), adj=0)
})
dev.off()
# GENUS-LEVEL NOVELTY ####
# create time-bin x grid x taxa array
neoArrGen <- tapply(neoSub$value,
list(neoSub$siteid, neoSub$genus, neoSub$timeBin), sum, na.rm=TRUE)
neoArrGen[is.na(neoArrGen)] = 0
# remove genera aquatic families
aquGen = unique(neoSub$genus[neoSub$family %in% c("Potamogetonaceae", "Nymphaeaceae",
"Typhaceae", "Cabombaceae",
"Alismataceae", "Haloragaceae")])
neoArrGen <- neoArrGen[,!dimnames(neoArrGen)[[2]] %in% aquGen,]
# remove extremely rare taxa - 50 most abundant genera
neoArrGenProp = array(apply(neoArrGen, 3, function(x){prop.table(x, margin=1)}),
dim=dim(neoArrGen), dimnames=dimnames(neoArrGen))
genMean = apply(neoArrGenProp, 2, mean, na.rm=TRUE)
neoArrGen = neoArrGen[,genMean >= sort(genMean, decreasing=TRUE)[50],]
#               Calculate novelty ####
# now we can make novelty assessments across modern vs pre-modern time slices
# subset array to time series with slices in the modern (-50-450 ybp) and pre-modern
# (450-950 ybp)
neoArrGenSub = neoArrGen[rowSums(neoArrGen[,,1] > 0) & rowSums(neoArrGen[,,2] >0),,1:2]
neoArrGenRoot = sqrt(neoArrGenSub)
novGridGen <- data.frame(siteid = rownames(neoArrGenSub))
novGridGen <- merge(novGridGen, subSite[,c("siteid", "long", "lat")],
by.x="siteid", by.y="siteid", all.x=TRUE, all.y=FALSE, sort=FALSE)
# novelty calculated four ways:
# how the past differs from the present (no-analog)
novGridGen = cbind(novGridGen,
do.call('rbind', lapply(1:dim(neoArrGenRoot)[1], function(n){
x = novelty(neoArrGenRoot[n,,2] / sum(neoArrGenRoot[n,,2]),
prop.table(neoArrGenRoot[,,1], 1), method="bray")
return(data.frame(noAnalog = x,
noAnalogWhich = names(x)))
})))
# how the present differs from the past (time's arrow novelty)
novGridGen = cbind(novGridGen,
do.call("rbind", lapply(1:dim(neoArrGenRoot)[1], function(n){
x = novelty(neoArrGenRoot[n,,1] / sum(neoArrGenRoot[n,,1]),
prop.table(neoArrGenRoot[,,2], 1), method="bray")
return(data.frame(timeArrow = x,
timeArrowWhich = names(x)))
})))
# how the past differs from the past (past comparison)
novGridGen = cbind(novGridGen,
do.call("rbind", lapply(1:dim(neoArrGenRoot)[1], function(n){
x = novelty(neoArrGenRoot[n,,2] / sum(neoArrGenRoot[n,,2]), prop.table(neoArrGenRoot[,,2], 1), method="bray", nSize=2)[2]
return(data.frame(pastComp = x,
pastCompWhich = names(x)))
})))
# how the present differs from the present (present comparison)
novGridGen = cbind(novGridGen,
do.call("rbind", lapply(1:dim(neoArrGenRoot)[1], function(n){
x = novelty(neoArrGenRoot[n,,1] / sum(neoArrGenRoot[n,,1]), prop.table(neoArrGenRoot[,,1], 1), method="bray", nSize=2)[2]
return(data.frame(presentComp = x,
presentCompWhich = names(x)))
})))
# re-order columns so novelty columns are all together
novGridGen = novGridGen[,c("siteid", "long", "lat",
"noAnalog", "timeArrow", "pastComp", "presentComp",
"noAnalogWhich", "timeArrowWhich", "pastCompWhich", "presentCompWhich")]
# does sample size correlate with novelty measures?
cor(sapply(novGridGen[,4:7], logit),
use="complete.obs")
